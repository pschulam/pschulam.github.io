<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://pschulam.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pschulam.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-11T17:34:22+00:00</updated><id>https://pschulam.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Blog System</title><link href="https://pschulam.github.io/blog/2024/blog-system/" rel="alternate" type="text/html" title="Blog System"/><published>2024-01-05T00:00:00+00:00</published><updated>2024-01-05T00:00:00+00:00</updated><id>https://pschulam.github.io/blog/2024/blog-system</id><content type="html" xml:base="https://pschulam.github.io/blog/2024/blog-system/"><![CDATA[<h1 id="how-my-site-uses-github-pages">How My Site Uses Github Pages</h1> <p>To quickly setup my personal site a few years ago, I pulled an <a href="https://github.com/alshedivat/al-folio">often used</a> academic website template built on <a href="https://jekyllrb.com/">Jekyll</a> and configured to deploy on Github Pages. The system worked smoothly, but it’s been a while since I’ve used it and in the meantime some of the pieces have stopped working. In this post, I describe the system and the modifications I’ve made to get everything working together again.</p> <h2 id="tools">Tools</h2> <p>The system uses Github Pages to host the site and Github Actions to deploy it.</p> <h3 id="github-pages">Github Pages</h3> <p>The main <a href="https://pages.github.com/">product page</a> states that you can host websites directly from your github repository: “Just edit, push, and your changes are live”. You can create two kinds of sites: account/organization sites (limited to just one), and unlimited project sites. For account/organization sites, the basic product is straightforward. You create a repository with a specific name (this is important so that Github knows that the repository is intended to be an account site), and then you use the repository as the “root” of your site by commiting an <code class="language-plaintext highlighter-rouge">index.html</code> file to it. Push the change you commit, and the site will be available.</p> <p>Pages serves static sites. This means, roughly, that the web server will map paths in the HTTP request to a stored object (could be a file in a file system, a chunk of bytes stored in a database, whatever) and returns the content as-is to the client. Unconfigured, Pages will serve the files saved in a Git repository on a given branch (<code class="language-plaintext highlighter-rouge">master</code> or <code class="language-plaintext highlighter-rouge">mainline</code> by default).</p> <p>In my site, I have two branches: <a href="https://github.com/pschulam/pschulam.github.io/tree/master">master</a> and <a href="https://github.com/pschulam/pschulam.github.io/tree/gh-pages">gh-pages</a>. The <code class="language-plaintext highlighter-rouge">master</code> branch contains all the source files that Jekyll uses to generate the site pages, and the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch contains the Jekyll output that Pages actually serves. These two branches, in general, are called the “source” and the “deploy” branches. To change the deploy branch, go to your repository’s <code class="language-plaintext highlighter-rouge">Settings &gt; Pages</code> and change the branch (there is also additional flexibility to deploy from a specific directory within a given branch). You can directly develop in the deploy branch (in which case there is no source branch), or you can use a build process to translate source artifacts into the final site. My site uses the “source and deploy branches” approach, and uses Github Actions for the build.</p> <h3 id="github-actions">Github Actions</h3> <p>Github Actions is a CI/CD platform. The key concept is a <em>workflow</em> which describes a collection of <em>jobs</em> that run in response to <em>triggers</em>. In many ways, Actions works like the front end to a cluster workload manager such as <a href="https://slurm.schedmd.com/documentation.html">Slurm</a> or <a href="https://kubernetes.io/">Kubernetes</a>. A workflow is defined using a YAML file and stored in the <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory of your repo.</p> <p>A trigger is an event that kicks off the jobs in a workflow. This is usually an event in the repo (e.g. you push a change or merge a pull request), but can also be a scheduled trigger (like a chron job) or a manual trigger.</p> <p>A job is a sequence of <em>steps</em> that are configured to run on a given machine. Each step can either be a script or an <em>action</em>, which is a reusable, configurable step. To specify where a job runs, you set the <code class="language-plaintext highlighter-rouge">runs-on</code> key in the configuration file. Github provides a small number of VM images for public repositories that are free to use. The options are listed <a href="https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories">here</a>. Actions supports running workflows on larger hosted machines (e.g. one with a GPU) or on self-hosted machines, but I won’t cover that here.</p> <p>For the site setup I’ve forked, Actions push content from <code class="language-plaintext highlighter-rouge">master</code> to <code class="language-plaintext highlighter-rouge">gh-pages</code>. The workflows are defined <a href="https://github.com/pschulam/pschulam.github.io/tree/master/.github/workflows">here</a>. Let’s break down how they work. We’ve got three workflows:</p> <ul> <li><a href="https://github.com/pschulam/pschulam.github.io/blob/master/.github/workflows/deploy-docker-tag.yml">deploy-docker-tag.yml</a>: Triggers when we push a tag that matches <code class="language-plaintext highlighter-rouge">v*</code>. There’s only one job. It checks out the repo, sets up an environment to build docker images, then builds the image using the <code class="language-plaintext highlighter-rouge">./Dockerfile</code> in the repo root. It then pushes to <code class="language-plaintext highlighter-rouge">[amirpourmand/al-folio](https://hub.docker.com/r/amirpourmand/al-folio)</code> on Dockerhub. I don’t ever use this.</li> <li><a href="https://github.com/pschulam/pschulam.github.io/blob/master/.github/workflows/deploy-image.yml">deploy-image.yml</a>: Similar to the <code class="language-plaintext highlighter-rouge">deploy-docker-tag.yml</code> workflow, but builds whenever we push to <code class="language-plaintext highlighter-rouge">master</code> and we’re the original author (which we’re not). The difference between this workflow and <code class="language-plaintext highlighter-rouge">deploy-docker-tag.yml</code> seems to be that the latter adds some metadata (my guess is the tag).</li> <li><a href="https://github.com/pschulam/pschulam.github.io/blob/master/.github/workflows/deploy.yml">deploy.yml</a>: This is the core workflow that builds my site. It has a single <code class="language-plaintext highlighter-rouge">deploy</code> job comprised of 5 steps (two actions and three scripts). The two actions (1) checkout the repo and (2) setup ruby. The scripts run afterwards and (1) installs the <code class="language-plaintext highlighter-rouge">mermaid</code> CLI tool, (2) configures git and sets some state based on the triggering event, and (3) runs the <code class="language-plaintext highlighter-rouge">./bin/deploy</code> script in the repo. The <code class="language-plaintext highlighter-rouge">./bin/deploy</code> script is where the bulk of the work happens. In a nutshell, the <code class="language-plaintext highlighter-rouge">./bin/deploy</code> script will checkout the source branch, build the site, move the <code class="language-plaintext highlighter-rouge">./_site</code> contents to the repo root (so that Pages will serve the content), create a new local deploy branch (deleting it if it exists), add the built site, then force push to the <code class="language-plaintext highlighter-rouge">origin</code> remote.</li> </ul> <p>Once the deploy branch is pushed to Github (<code class="language-plaintext highlighter-rouge">remote</code>), Pages will serve the new content!</p> <h2 id="developing-locally">Developing Locally</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundler jekyll
bundle <span class="nb">install
</span>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[How My Site Uses Github Pages]]></summary></entry></feed>